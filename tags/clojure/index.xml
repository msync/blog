<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>clojure on Sync&#39;ing from Memory</title>
    <link>https://msync.org/tags/clojure/</link>
    <description>Recent content in clojure on Sync&#39;ing from Memory</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 13 Sep 2020 10:48:55 +0530</lastBuildDate><atom:link href="https://msync.org/tags/clojure/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Emacs Productivity Notes For The Newbie</title>
      <link>https://msync.org/notes/emacs-productivity-notes-for-the-newbie/</link>
      <pubDate>Sun, 13 Sep 2020 10:48:55 +0530</pubDate>
      
      <guid>https://msync.org/notes/emacs-productivity-notes-for-the-newbie/</guid>
      <description>Packages and config about Emacs that I tend to forget, so here are my reminders</description>
    </item>
    
    <item>
      <title>Notes for Deep Learning with Python</title>
      <link>https://msync.org/notes/notes-for-deep-learning-with-python/</link>
      <pubDate>Sat, 06 Jun 2020 19:23:10 +0530</pubDate>
      
      <guid>https://msync.org/notes/notes-for-deep-learning-with-python/</guid>
      <description>Chapter-wise notes for &amp;lt;a href=&amp;#34;&lt;a href=&#34;https://www.manning.com/books/deep-learning-with-python-second-edition&#34;&gt;https://www.manning.com/books/deep-learning-with-python-second-edition&lt;/a&gt;&amp;#34;&amp;gt;Deep Learning with Python&amp;lt;/a&amp;gt; with Python and Clojure code samples. The book is not done. These notes are evolving as I get deeper both into the book and the accompanying code.</description>
    </item>
    
    <item>
      <title>ML in Clojure via Python</title>
      <link>https://msync.org/notes/ml-in-clojure-via-python/</link>
      <pubDate>Sun, 02 Feb 2020 16:34:55 +0530</pubDate>
      
      <guid>https://msync.org/notes/ml-in-clojure-via-python/</guid>
      <description>Notes around ongoing experiments with doing ML with Python libraries via Clojure using libpython-clj</description>
    </item>
    
    <item>
      <title>A Neural Network Primer</title>
      <link>https://msync.org/notes/a-neural-network-primer/</link>
      <pubDate>Sat, 23 Sep 2017 11:44:27 +0530</pubDate>
      
      <guid>https://msync.org/notes/a-neural-network-primer/</guid>
      <description>Preface/Purpose  I chanced upon this primer from the 90s, on artificial neural networks, and thought it might be a good idea to write something similar.
  It&amp;#39;s just a functionâ€¦  A neuron is a computing unit &amp;amp;mdash; a function that acts on its input to compute an outcome. It discerns between different inputs and slots them into some categories. Mostly, two categories. Given some input, it either decides to stay inert, or fire a signal for the next-in-line neurons to consume as their input.</description>
    </item>
    
    <item>
      <title>Clojure</title>
      <link>https://msync.org/notes/clojure/</link>
      <pubDate>Mon, 10 Jul 2017 11:23:36 +0530</pubDate>
      
      <guid>https://msync.org/notes/clojure/</guid>
      <description>Clojure Notes - An aimless dump of anything and everything interesting I find &amp;lt;em&amp;gt;and&amp;lt;/em&amp;gt; manage to record.</description>
    </item>
    
    <item>
      <title>Useful Clojure Asides - Logging and Exceptions</title>
      <link>https://msync.org/posts/2015/2015-06-08-clojure-useful-asides/</link>
      <pubDate>Mon, 08 Jun 2015 22:20:00 +0530</pubDate>
      
      <guid>https://msync.org/posts/2015/2015-06-08-clojure-useful-asides/</guid>
      <description>Logging and exception handling are such core requirements in any application which are rarely, if ever, discussed. At least in the initial phases of any application. But as any developer would vouch (when asked, not voluntarily, I think), logging right is a very crucial aspect of any application. Not only does it help you understand the (then-) current state of the application, they also help folks trace causes of various problems when done right.</description>
    </item>
    
    <item>
      <title>Interesting Java in &lt;em&gt;clojure.core&lt;/em&gt;</title>
      <link>https://msync.org/posts/2015/2015-05-16-interesting-java-in-clojure-core/</link>
      <pubDate>Fri, 15 May 2015 22:11:00 +0530</pubDate>
      
      <guid>https://msync.org/posts/2015/2015-05-16-interesting-java-in-clojure-core/</guid>
      <description>The Clojure language primarily targets the Java Virtual Machine, and so obviously, we have a topic.
 Quick array creation from some items  // clojure.lang.Intrinsics private static Object[] oa(Object... arr) { return arr; }  </description>
    </item>
    
    <item>
      <title>Developing Chrome Extensions using Clojurescript</title>
      <link>https://msync.org/posts/2015/2015-04-05-chrome-extensions-and-clojurescript/</link>
      <pubDate>Sun, 05 Apr 2015 14:55:00 +0530</pubDate>
      
      <guid>https://msync.org/posts/2015/2015-04-05-chrome-extensions-and-clojurescript/</guid>
      <description>TL;DR - Of course, you can use Clojurescript to develop Chrome Extensions. So, that&amp;#39;s not the topic of this post. I&amp;#39;ve only documented how you&amp;#39;d set up your project, using the latest versions (as of this post&amp;#39;s publishing) of piggieback and weasel.
 Why Weasel? Because, as its author explains
 A WebSocket transport is simple and avoids some of the thornier bugs caused by the CrossPageChannel transport, which is used in the standard ClojureScript browser REPL and Austin.</description>
    </item>
    
  </channel>
</rss>
